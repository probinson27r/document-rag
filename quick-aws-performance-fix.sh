#!/bin/bash

# Quick AWS Performance Fix Script
# Run this on your AWS instance to apply immediate performance improvements

echo "üöÄ Quick AWS Performance Fix"
echo "============================="
echo ""

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    echo "‚ö†Ô∏è  Running as root. Some optimizations may not apply correctly."
fi

# 1. Add swap memory if not present
echo "1. üíæ Checking swap memory..."
if [ $(swapon --show | wc -l) -eq 0 ]; then
    echo "   No swap detected. Creating 4GB swap file..."
    sudo fallocate -l 4G /swapfile 2>/dev/null || sudo dd if=/dev/zero of=/swapfile bs=1M count=4096
    sudo chmod 600 /swapfile
    sudo mkswap /swapfile
    sudo swapon /swapfile
    echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
    echo "   ‚úÖ 4GB swap file created"
else
    echo "   ‚úÖ Swap already configured"
fi
echo ""

# 2. Optimize kernel parameters
echo "2. ‚öôÔ∏è  Optimizing kernel parameters..."
echo "vm.swappiness=10" | sudo tee -a /etc/sysctl.conf
echo "vm.vfs_cache_pressure=50" | sudo tee -a /etc/sysctl.conf
sudo sysctl -p
echo "   ‚úÖ Kernel parameters optimized"
echo ""

# 3. Create optimized cache directories
echo "3. üìÅ Creating optimized cache directories..."
mkdir -p /tmp/huggingface_cache
mkdir -p /tmp/pip_cache
chmod 755 /tmp/huggingface_cache /tmp/pip_cache
echo "   ‚úÖ Cache directories created"
echo ""

# 4. Install performance monitoring tools
echo "4. üìä Installing performance tools..."
if ! command -v htop &> /dev/null; then
    sudo apt-get update -qq
    sudo apt-get install -y htop iotop
    echo "   ‚úÖ Performance tools installed"
else
    echo "   ‚úÖ Performance tools already available"
fi
echo ""

# 5. Optimize Python environment
echo "5. üêç Optimizing Python environment..."
cd /opt/legal-rag-app

# Create optimized startup script
cat > start-optimized.sh << 'EOF'
#!/bin/bash
export PYTHONUNBUFFERED=1
export PYTHONDONTWRITEBYTECODE=1
export OPENBLAS_NUM_THREADS=4
export MKL_NUM_THREADS=4
export TOKENIZERS_PARALLELISM=false
export TRANSFORMERS_CACHE=/tmp/huggingface_cache
export HF_HOME=/tmp/huggingface_cache
export TORCH_HOME=/tmp/huggingface_cache

cd /opt/legal-rag-app
source venv/bin/activate
python app.py
EOF

chmod +x start-optimized.sh
echo "   ‚úÖ Optimized startup script created"
echo ""

# 6. Update systemd service for performance
echo "6. üîß Updating systemd service..."
sudo tee /etc/systemd/system/legal-rag.service > /dev/null << 'EOF'
[Unit]
Description=Legal RAG Application
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory=/opt/legal-rag-app
Environment=PYTHONUNBUFFERED=1
Environment=PYTHONDONTWRITEBYTECODE=1
Environment=OPENBLAS_NUM_THREADS=4
Environment=MKL_NUM_THREADS=4
Environment=TOKENIZERS_PARALLELISM=false
Environment=TRANSFORMERS_CACHE=/tmp/huggingface_cache
Environment=HF_HOME=/tmp/huggingface_cache
Environment=TORCH_HOME=/tmp/huggingface_cache
ExecStart=/opt/legal-rag-app/venv/bin/python app.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

sudo systemctl daemon-reload
echo "   ‚úÖ Systemd service updated"
echo ""

# 7. Pre-install performance dependencies
echo "7. üì¶ Installing performance dependencies..."
source venv/bin/activate
pip install --cache-dir /tmp/pip_cache psutil 2>/dev/null || echo "   ‚ö†Ô∏è  psutil installation failed (non-critical)"
echo "   ‚úÖ Performance dependencies ready"
echo ""

# 8. Restart the service with optimizations
echo "8. üîÑ Restarting service with optimizations..."
sudo systemctl stop legal-rag 2>/dev/null || echo "   Service was not running"
sudo systemctl enable legal-rag
sudo systemctl start legal-rag

# Wait for service to start
sleep 5

if sudo systemctl is-active --quiet legal-rag; then
    echo "   ‚úÖ Service restarted successfully with optimizations"
else
    echo "   ‚ùå Service failed to start. Check logs: sudo journalctl -u legal-rag -n 20"
fi
echo ""

# 9. Performance summary
echo "üéØ Performance Optimizations Applied:"
echo "====================================="
echo "‚úÖ 4GB swap memory added"
echo "‚úÖ Kernel parameters optimized"
echo "‚úÖ Cache directories created"
echo "‚úÖ Performance monitoring tools installed"
echo "‚úÖ Python environment optimized"
echo "‚úÖ Systemd service updated"
echo "‚úÖ Service restarted"
echo ""

echo "üìä Current System Status:"
echo "========================"
echo "Memory usage:"
free -h
echo ""
echo "Swap usage:"
swapon --show 2>/dev/null || echo "No swap active"
echo ""
echo "CPU cores: $(nproc)"
echo "Load average: $(uptime | awk -F'load average:' '{print $2}')"
echo ""

echo "üîç Service status:"
sudo systemctl status legal-rag --no-pager -l
echo ""

echo "üí° Next Steps:"
echo "=============="
echo "1. Test document upload to verify improved performance"
echo "2. Monitor with: sudo journalctl -u legal-rag -f"
echo "3. Check system resources with: htop"
echo "4. If still slow, consider upgrading EC2 instance type"
echo ""

echo "‚úÖ Quick performance fix complete!"
