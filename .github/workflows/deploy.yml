name: Deploy to EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        cp -r app.py document_rag.py hybrid_search.py legal_document_rag.py deployment/
        cp -r templates static deployment/
        cp requirements.txt deployment/
        cp -r cognito_auth.py aws_secrets.py export_utils.py deployment/
        cp -r gpt4_chunking.py gpt4_extraction.py semantic_chunking.py langextract_chunking.py deployment/
        cp -r cli.py flask_app.py deployment/
        
        # Copy systemd service file if it exists
        if [ -f "legal-rag.service" ]; then
          cp legal-rag.service deployment/
        fi
        
        # Create necessary directories
        mkdir -p deployment/uploads
        mkdir -p deployment/chroma_db
        mkdir -p deployment/flask_session
        
        # Create deployment script
        cat > deployment/deploy.sh << 'DEPLOYEOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Stop systemd service if running
        echo "🛑 Stopping legal-rag service..."
        sudo systemctl stop legal-rag 2>/dev/null || true
        
        # Smart virtual environment management
        echo "🔧 Managing virtual environment..."
        
        # Check if we need to rebuild venv (compare requirements.txt hash)
        REQUIREMENTS_HASH=$(sha256sum requirements.txt | cut -d' ' -f1)
        VENV_HASH_FILE="venv/.requirements_hash"
        REBUILD_VENV=false
        
        if [ ! -d "venv" ]; then
            echo "📝 No existing virtual environment found - creating new one"
            REBUILD_VENV=true
        elif [ ! -f "$VENV_HASH_FILE" ]; then
            echo "📝 No requirements hash found - rebuilding venv"
            REBUILD_VENV=true
        else
            STORED_HASH=$(cat "$VENV_HASH_FILE" 2>/dev/null || echo "")
            if [ "$REQUIREMENTS_HASH" != "$STORED_HASH" ]; then
                echo "📝 Requirements.txt changed - rebuilding venv"
                echo "   Old hash: $STORED_HASH"
                echo "   New hash: $REQUIREMENTS_HASH"
                REBUILD_VENV=true
            else
                echo "✅ Requirements unchanged - reusing existing venv"
                echo "   Hash: $REQUIREMENTS_HASH"
            fi
        fi
        
        if [ "$REBUILD_VENV" = true ]; then
            # Backup existing venv for rollback if needed
            if [ -d "venv" ]; then
                echo "💾 Backing up existing venv..."
                sudo mv venv venv.backup.$(date +%s) || true
            fi
            
            # Create fresh virtual environment
            echo "🆕 Creating fresh virtual environment..."
            python3 -m venv venv
            source venv/bin/activate
            
            # Upgrade pip
            pip install --upgrade pip
            
            # Install dependencies (with cache for faster installs)
            echo "📦 Installing dependencies..."
            pip install -r requirements.txt
            
            # Store requirements hash for future comparisons
            echo "$REQUIREMENTS_HASH" > "$VENV_HASH_FILE"
            echo "✅ Virtual environment created and hash stored"
            
            # Clean up old backups (keep only last 2)
            echo "🧹 Cleaning up old venv backups..."
            ls -1t venv.backup.* 2>/dev/null | tail -n +3 | xargs rm -rf || true
        else
            # Activate existing venv
            source venv/bin/activate
            
            # Quick pip upgrade check (much faster than full rebuild)
            echo "⚡ Quick pip upgrade check..."
            pip install --upgrade pip --quiet
        fi
        
        # Verify critical dependencies
        echo "🔍 Verifying dependencies..."
        python -c "import flask; print(f'Flask: {flask.__version__}')"
        python -c "import numpy; print(f'NumPy: {numpy.__version__}')"
        
        # Set proper permissions
        sudo chown -R ubuntu:ubuntu /opt/legal-rag-app
        
        # Create systemd service file
        echo "⚙️ Setting up systemd service..."
        echo "[Unit]" > /tmp/legal-rag.service
        echo "Description=Legal Document RAG System" >> /tmp/legal-rag.service
        echo "After=network.target" >> /tmp/legal-rag.service
        echo "" >> /tmp/legal-rag.service
        echo "[Service]" >> /tmp/legal-rag.service
        echo "Type=simple" >> /tmp/legal-rag.service
        echo "User=ubuntu" >> /tmp/legal-rag.service
        echo "WorkingDirectory=/opt/legal-rag-app" >> /tmp/legal-rag.service
        echo "Environment=PATH=/opt/legal-rag-app/venv/bin" >> /tmp/legal-rag.service
        echo "EnvironmentFile=-/opt/legal-rag-app/.env" >> /tmp/legal-rag.service
        echo "ExecStart=/opt/legal-rag-app/venv/bin/python app.py --host 0.0.0.0 --port 5001" >> /tmp/legal-rag.service
        echo "Restart=always" >> /tmp/legal-rag.service
        echo "RestartSec=3" >> /tmp/legal-rag.service
        echo "" >> /tmp/legal-rag.service
        echo "[Install]" >> /tmp/legal-rag.service
        echo "WantedBy=multi-user.target" >> /tmp/legal-rag.service
        
        # Install the service file
        sudo mv /tmp/legal-rag.service /etc/systemd/system/legal-rag.service
        
        # Reload systemd and enable service
        sudo systemctl daemon-reload
        sudo systemctl enable legal-rag
        
        # Start the service
        echo "🚀 Starting legal-rag service..."
        sudo systemctl start legal-rag
        
        # Wait for startup (dependencies installation can take time)
        sleep 15
        
        # Check service status
        if sudo systemctl is-active legal-rag >/dev/null; then
            echo "✅ Service started successfully"
            sudo systemctl status legal-rag --no-pager -l
        else
            echo "❌ Service failed to start"
            sudo systemctl status legal-rag --no-pager -l
            sudo journalctl -u legal-rag --no-pager -n 20
            exit 1
        fi
        
        echo "✅ Deployment completed!"
        DEPLOYEOF
        
        chmod +x deployment/deploy.sh
        
        # Create tar.gz
        tar -czf deployment.tar.gz deployment/
    
    - name: Validate SSH host and key
      run: |
        set -e
        # Read and sanitize host from secret
        HOST_RAW="${{ secrets.EC2_INSTANCE_IP }}"
        HOST_TRIMMED=$(echo "$HOST_RAW" | tr -d ' \t\r\n')
        if [ -z "$HOST_TRIMMED" ]; then
          echo "::error::EC2_INSTANCE_IP GitHub secret is missing or empty"
          exit 1
        fi
        # If user included username in the secret, respect it; otherwise default to ubuntu@
        if echo "$HOST_TRIMMED" | grep -q "@"; then
          USER_HOST="$HOST_TRIMMED"
        else
          USER_HOST="ubuntu@$HOST_TRIMMED"
        fi
        echo "Using SSH target: $USER_HOST"

        # Prepare SSH key (handle both real newlines and escaped \n)
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ssh_key
        chmod 600 ssh_key

        # Basic DNS/port checks (non-fatal DNS info)
        which dig >/dev/null 2>&1 && dig +short "${HOST_TRIMMED}" || true
        which nslookup >/dev/null 2>&1 && nslookup "${HOST_TRIMMED}" || true

        # Check SSH connectivity quickly
        ssh -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=15 "$USER_HOST" "echo 'SSH connectivity OK'" || {
          echo "::error::Unable to reach $USER_HOST via SSH. Check EC2 public IP/DNS, security groups (port 22), and that the key matches the instance."
          exit 1
        }

        # Export for subsequent steps
        echo "USER_HOST=$USER_HOST" >> $GITHUB_ENV

    - name: Deploy to EC2
      run: |
        set -e
        # Recreate SSH key for this step (USER_HOST available from environment)
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ssh_key
        chmod 600 ssh_key
        
        # Copy deployment package
        scp -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 deployment.tar.gz "$USER_HOST":/home/ubuntu/
        
        # Execute deployment
        ssh -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$USER_HOST" << 'SSHEOF'
          set -e
          
          echo "📦 Extracting deployment package..."
          tar -xzf deployment.tar.gz
          
          echo "🔄 Updating application..."
          
          # Smart application update preserving persistent data and virtual environment
          if [ -d "/opt/legal-rag-app" ]; then
            echo "🔄 Updating application while preserving persistent data..."
            
            # Backup only critical persistent data (not venv - it's managed in-place)
            sudo mkdir -p /tmp/backup
            if [ -d "/opt/legal-rag-app/chroma_db" ]; then
              sudo cp -r /opt/legal-rag-app/chroma_db /tmp/backup/ || true
            fi
            if [ -d "/opt/legal-rag-app/uploads" ]; then
              sudo cp -r /opt/legal-rag-app/uploads /tmp/backup/ || true
            fi
            if [ -d "/opt/legal-rag-app/flask_session" ]; then
              sudo cp -r /opt/legal-rag-app/flask_session /tmp/backup/ || true
            fi
            
            # Preserve virtual environment by moving it temporarily
            if [ -d "/opt/legal-rag-app/venv" ]; then
              echo "📦 Preserving virtual environment..."
              sudo mv /opt/legal-rag-app/venv /tmp/preserved_venv || true
            fi
            
            # Remove application files but preserve structure
            sudo find /opt/legal-rag-app -type f -name "*.py" -delete || true
            sudo find /opt/legal-rag-app -type f -name "*.txt" -delete || true
            sudo find /opt/legal-rag-app -type f -name "*.md" -delete || true
            sudo find /opt/legal-rag-app -type f -name "*.sh" -delete || true
            sudo find /opt/legal-rag-app -type f -name "*.service" -delete || true
            sudo rm -rf /opt/legal-rag-app/templates /opt/legal-rag-app/static || true
            
            # Copy new application files
            sudo cp -r deployment/* /opt/legal-rag-app/ || true
            
            # Restore preserved virtual environment
            if [ -d "/tmp/preserved_venv" ]; then
              echo "📦 Restoring preserved virtual environment..."
              sudo mv /tmp/preserved_venv /opt/legal-rag-app/venv || true
            fi
          else
            echo "🆕 Fresh installation..."
            sudo mv deployment /opt/legal-rag-app
          fi
          
          # Ensure proper ownership
          sudo chown -R ubuntu:ubuntu /opt/legal-rag-app
          
          # Restore persistent data
          if [ -d "/tmp/backup" ]; then
            echo "🔄 Restoring persistent data..."
            if [ -d "/tmp/backup/chroma_db" ]; then
              sudo rm -rf /opt/legal-rag-app/chroma_db
              sudo mv /tmp/backup/chroma_db /opt/legal-rag-app/
            fi
            if [ -d "/tmp/backup/uploads" ]; then
              sudo rm -rf /opt/legal-rag-app/uploads
              sudo mv /tmp/backup/uploads /opt/legal-rag-app/
            fi
            if [ -d "/tmp/backup/flask_session" ]; then
              sudo rm -rf /opt/legal-rag-app/flask_session
              sudo mv /tmp/backup/flask_session /opt/legal-rag-app/
            fi
            # Clean up backup
            sudo rm -rf /tmp/backup
            echo "✅ Persistent data restored"
          fi
          
          # Ensure proper ownership after restore
          sudo chown -R ubuntu:ubuntu /opt/legal-rag-app
          
          cd /opt/legal-rag-app
          
          # Set up environment variables for secrets access fallback
          echo "🔧 Setting up environment variables..."
          echo "# Environment variables for Legal Document RAG System" > .env
          echo "# These serve as fallbacks if AWS Secrets Manager is not accessible" >> .env
          echo "FLASK_ENV=production" >> .env
          echo "# Note: Add your actual API keys here or use AWS Secrets Manager" >> .env
          echo "# PRIVATE_GPT4_API_KEY=your-private-gpt4-key" >> .env
          echo "# ANTHROPIC_API_KEY=your-anthropic-key" >> .env
          echo "# OPENAI_API_KEY=your-openai-key" >> .env
          echo "# SECRET_KEY=your-flask-secret-key" >> .env
          
          # Verify persistent data directories exist
          echo "🔍 Verifying persistent data directories..."
          ls -la chroma_db/ 2>/dev/null && echo "✅ ChromaDB directory exists" || echo "⚠️  ChromaDB directory is empty (first deployment)"
          ls -la uploads/ 2>/dev/null && echo "✅ Uploads directory exists" || echo "ℹ️  Uploads directory is empty"
          
          ./deploy.sh
          
          echo "✅ Deployment completed successfully!"
        SSHEOF
        
        echo "✅ Deployment completed successfully! Manual health checks can be performed as needed."
