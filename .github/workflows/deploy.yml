name: Deploy to EC2

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deployment
        cp -r app.py document_rag.py hybrid_search.py legal_document_rag.py deployment/
        cp -r templates static deployment/
        cp requirements.txt deployment/
        cp -r cognito_auth.py aws_secrets.py export_utils.py deployment/
        cp -r gpt4_chunking.py gpt4_extraction.py semantic_chunking.py langextract_chunking.py deployment/
        cp -r cli.py flask_app.py deployment/
        
        # Copy systemd service file if it exists
        if [ -f "legal-rag.service" ]; then
          cp legal-rag.service deployment/
        fi
        
        # Create necessary directories
        mkdir -p deployment/uploads
        mkdir -p deployment/chroma_db
        mkdir -p deployment/flask_session
        
        # Create deployment script
        cat > deployment/deploy.sh << 'DEPLOYEOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Stop systemd service if running
        echo "üõë Stopping legal-rag service..."
        sudo systemctl stop legal-rag 2>/dev/null || true
        
        # Create/update virtual environment
        echo "üîß Setting up virtual environment..."
        if [ -d "venv" ]; then
            rm -rf venv
        fi
        python3 -m venv venv
        source venv/bin/activate
        
        # Upgrade pip
        pip install --upgrade pip
        
        # Install dependencies with proper error handling
        echo "üì¶ Installing dependencies..."
        pip install --no-cache-dir -r requirements.txt
        
        # Verify critical dependencies
        echo "üîç Verifying dependencies..."
        python -c "import flask; print(f'Flask: {flask.__version__}')"
        python -c "import numpy; print(f'NumPy: {numpy.__version__}')"
        
        # Set proper permissions
        sudo chown -R ubuntu:ubuntu /opt/legal-rag-app
        
        # Create systemd service file
        echo "‚öôÔ∏è Setting up systemd service..."
        cat > /tmp/legal-rag.service << 'SERVICEEOF'
[Unit]
Description=Legal Document RAG System
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory=/opt/legal-rag-app
Environment=PATH=/opt/legal-rag-app/venv/bin
ExecStart=/opt/legal-rag-app/venv/bin/python app.py --host 0.0.0.0 --port 5001
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
SERVICEEOF
        
        # Install the service file
        sudo mv /tmp/legal-rag.service /etc/systemd/system/legal-rag.service
        
        # Reload systemd and enable service
        sudo systemctl daemon-reload
        sudo systemctl enable legal-rag
        
        # Start the service
        echo "üöÄ Starting legal-rag service..."
        sudo systemctl start legal-rag
        
        # Wait for startup
        sleep 5
        
        # Check service status
        if sudo systemctl is-active legal-rag >/dev/null; then
            echo "‚úÖ Service started successfully"
            sudo systemctl status legal-rag --no-pager -l
        else
            echo "‚ùå Service failed to start"
            sudo systemctl status legal-rag --no-pager -l
            sudo journalctl -u legal-rag --no-pager -n 20
            exit 1
        fi
        
        echo "‚úÖ Deployment completed!"
DEPLOYEOF
        
        chmod +x deployment/deploy.sh
        
        # Create tar.gz
        tar -czf deployment.tar.gz deployment/
    
    - name: Validate SSH host and key
      run: |
        set -e
        # Read and sanitize host from secret
        HOST_RAW="${{ secrets.EC2_INSTANCE_IP }}"
        HOST_TRIMMED=$(echo "$HOST_RAW" | tr -d ' \t\r\n')
        if [ -z "$HOST_TRIMMED" ]; then
          echo "::error::EC2_INSTANCE_IP GitHub secret is missing or empty"
          exit 1
        fi
        # If user included username in the secret, respect it; otherwise default to ubuntu@
        if echo "$HOST_TRIMMED" | grep -q "@"; then
          USER_HOST="$HOST_TRIMMED"
        else
          USER_HOST="ubuntu@$HOST_TRIMMED"
        fi
        echo "Using SSH target: $USER_HOST"

        # Prepare SSH key (handle both real newlines and escaped \n)
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | sed 's/\\n/\n/g' > ssh_key
        chmod 600 ssh_key

        # Basic DNS/port checks (non-fatal DNS info)
        which dig >/dev/null 2>&1 && dig +short "${HOST_TRIMMED}" || true
        which nslookup >/dev/null 2>&1 && nslookup "${HOST_TRIMMED}" || true

        # Check SSH connectivity quickly
        ssh -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=15 "$USER_HOST" "echo 'SSH connectivity OK'" || {
          echo "::error::Unable to reach $USER_HOST via SSH. Check EC2 public IP/DNS, security groups (port 22), and that the key matches the instance."
          exit 1
        }

        # Export for subsequent steps
        echo "USER_HOST=$USER_HOST" >> $GITHUB_ENV

    - name: Deploy to EC2
      run: |
        set -e
        # ssh_key prepared in previous step; USER_HOST exported
        
        # Copy deployment package
        scp -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 deployment.tar.gz "$USER_HOST":/home/ubuntu/
        
        # Execute deployment
        ssh -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$USER_HOST" << 'SSHEOF'
          set -e
          
          echo "üì¶ Extracting deployment package..."
          tar -xzf deployment.tar.gz
          
          echo "üîÑ Updating application..."
          sudo rm -rf /opt/legal-rag-app
          sudo mv deployment /opt/legal-rag-app
          sudo chown -R ubuntu:ubuntu /opt/legal-rag-app
          
          cd /opt/legal-rag-app
          ./deploy.sh
          
          echo "‚úÖ Deployment completed successfully!"
SSHEOF
        
        # Clean up
        rm -f ssh_key
    
    - name: Health check
      run: |
        set -e
        # ssh_key prepared earlier; USER_HOST exported
        
        # Wait for application to start
        sleep 30
        
        # Check service and health endpoint
        ssh -i ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=30 "$USER_HOST" << 'HEALTHEOF'
          echo "üîç Checking service status..."
          if sudo systemctl is-active legal-rag >/dev/null; then
            echo "‚úÖ legal-rag service is active"
            
            echo "üîå Checking port binding..."
            if sudo netstat -tlnp | grep :5001 >/dev/null; then
              echo "‚úÖ Port 5001 is listening"
              
              echo "üè• Testing health endpoint..."
              if curl -f http://localhost:5001/health >/dev/null 2>&1; then
                echo "‚úÖ Health check passed"
                echo "üåê ALB should be able to reach the application"
              else
                echo "‚ùå Health endpoint failed"
                exit 1
              fi
            else
              echo "‚ùå Port 5001 is not listening"
              sudo systemctl status legal-rag --no-pager -l
              exit 1
            fi
          else
            echo "‚ùå legal-rag service is not active"
            sudo systemctl status legal-rag --no-pager -l
            sudo journalctl -u legal-rag --no-pager -n 20
            exit 1
          fi
HEALTHEOF
        
        rm -f ssh_key
