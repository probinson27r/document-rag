name: Deploy to AWS Container (ECS/ECR)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY_NAME: legal-document-rag
  CLUSTER_NAME: legal-rag-cluster
  SERVICE_NAME: legal-rag-service
  TASK_DEFINITION_NAME: legal-rag-task

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REPOSITORY_NAME:$IMAGE_TAG .
        docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
        docker tag $ECR_REPOSITORY_NAME:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} \
        --query taskDefinition > task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: legal-rag-app
        image: ${{ steps.build-and-deploy.outputs.image }}
    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.SERVICE_NAME }}
        cluster: ${{ env.CLUSTER_NAME }}
        wait-for-service-stability: true
    
    - name: Health check
      run: |
        echo "Waiting for service to be stable..."
        sleep 60
        
        # Get the service URL (you'll need to configure this)
        if [ ! -z "${{ secrets.ALB_URL }}" ]; then
          echo "Running health check on ${{ secrets.ALB_URL }}"
          curl -f ${{ secrets.ALB_URL }}/health || echo "Health check failed"
        else
          echo "No ALB_URL configured, skipping health check"
        fi
